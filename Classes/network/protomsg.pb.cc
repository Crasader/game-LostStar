// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protomsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protomsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Star {

void protobuf_ShutdownFile_protomsg_2eproto() {
  delete AccountInfo::default_instance_;
  delete TaskInfo::default_instance_;
  delete SolutionInfo::default_instance_;
  delete SyncReq::default_instance_;
  delete SyncRsp::default_instance_;
  delete UploadTaskInfoReq::default_instance_;
  delete UploadTaskInfoRsp::default_instance_;
  delete UploadSolutionReq::default_instance_;
  delete UploadSolutionRsp::default_instance_;
  delete DownloadSolutionReq::default_instance_;
  delete DownloadSolutionRsp::default_instance_;
  delete UpSolutionReq::default_instance_;
  delete UpSolutionRsp::default_instance_;
  delete FriendsInfo::default_instance_;
  delete QueryFriendsInfoReq::default_instance_;
  delete QueryFriendsInfoRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_protomsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_protomsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AccountInfo::default_instance_ = new AccountInfo();
  TaskInfo::default_instance_ = new TaskInfo();
  SolutionInfo::default_instance_ = new SolutionInfo();
  SyncReq::default_instance_ = new SyncReq();
  SyncRsp::default_instance_ = new SyncRsp();
  UploadTaskInfoReq::default_instance_ = new UploadTaskInfoReq();
  UploadTaskInfoRsp::default_instance_ = new UploadTaskInfoRsp();
  UploadSolutionReq::default_instance_ = new UploadSolutionReq();
  UploadSolutionRsp::default_instance_ = new UploadSolutionRsp();
  DownloadSolutionReq::default_instance_ = new DownloadSolutionReq();
  DownloadSolutionRsp::default_instance_ = new DownloadSolutionRsp();
  UpSolutionReq::default_instance_ = new UpSolutionReq();
  UpSolutionRsp::default_instance_ = new UpSolutionRsp();
  FriendsInfo::default_instance_ = new FriendsInfo();
  QueryFriendsInfoReq::default_instance_ = new QueryFriendsInfoReq();
  QueryFriendsInfoRsp::default_instance_ = new QueryFriendsInfoRsp();
  AccountInfo::default_instance_->InitAsDefaultInstance();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  SolutionInfo::default_instance_->InitAsDefaultInstance();
  SyncReq::default_instance_->InitAsDefaultInstance();
  SyncRsp::default_instance_->InitAsDefaultInstance();
  UploadTaskInfoReq::default_instance_->InitAsDefaultInstance();
  UploadTaskInfoRsp::default_instance_->InitAsDefaultInstance();
  UploadSolutionReq::default_instance_->InitAsDefaultInstance();
  UploadSolutionRsp::default_instance_->InitAsDefaultInstance();
  DownloadSolutionReq::default_instance_->InitAsDefaultInstance();
  DownloadSolutionRsp::default_instance_->InitAsDefaultInstance();
  UpSolutionReq::default_instance_->InitAsDefaultInstance();
  UpSolutionRsp::default_instance_->InitAsDefaultInstance();
  FriendsInfo::default_instance_->InitAsDefaultInstance();
  QueryFriendsInfoReq::default_instance_->InitAsDefaultInstance();
  QueryFriendsInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protomsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_protomsg_2eproto_once_);
void protobuf_AddDesc_protomsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_protomsg_2eproto_once_,
                 &protobuf_AddDesc_protomsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protomsg_2eproto {
  StaticDescriptorInitializer_protomsg_2eproto() {
    protobuf_AddDesc_protomsg_2eproto();
  }
} static_descriptor_initializer_protomsg_2eproto_;
#endif
bool PlatformType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AccountInfo::kPlatformFieldNumber;
const int AccountInfo::kAccountFieldNumber;
#endif  // !_MSC_VER

AccountInfo::AccountInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AccountInfo::InitAsDefaultInstance() {
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  platform_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountInfo::~AccountInfo() {
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AccountInfo& AccountInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

AccountInfo* AccountInfo::default_instance_ = NULL;

AccountInfo* AccountInfo::New() const {
  return new AccountInfo;
}

void AccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    platform_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Star.PlatformType platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Star::PlatformType_IsValid(value)) {
            set_platform(static_cast< ::Star::PlatformType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Star.PlatformType platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->platform(), output);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

}

int AccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Star.PlatformType platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AccountInfo*>(&from));
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AccountInfo::GetTypeName() const {
  return "Star.AccountInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int TaskInfo::kTaskIdFieldNumber;
const int TaskInfo::kStarFieldNumber;
const int TaskInfo::kScoreFieldNumber;
const int TaskInfo::kHighestScoreFieldNumber;
const int TaskInfo::kAverageScoreFieldNumber;
const int TaskInfo::kPlayerCountFieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TaskInfo::InitAsDefaultInstance() {
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TaskInfo::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_LONGLONG(0);
  star_ = 0;
  score_ = 0;
  highest_score_ = 0;
  average_score_ = 0;
  player_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfo::~TaskInfo() {
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskInfo& TaskInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New() const {
  return new TaskInfo;
}

void TaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = GOOGLE_LONGLONG(0);
    star_ = 0;
    score_ = 0;
    highest_score_ = 0;
    average_score_ = 0;
    player_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_highest_score;
        break;
      }

      // optional int32 highest_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highest_score_)));
          set_has_highest_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_average_score;
        break;
      }

      // optional int32 average_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_average_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_score_)));
          set_has_average_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_count;
        break;
      }

      // optional int32 player_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional int32 highest_score = 4;
  if (has_highest_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->highest_score(), output);
  }

  // optional int32 average_score = 5;
  if (has_average_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->average_score(), output);
  }

  // optional int32 player_count = 6;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_count(), output);
  }

}

int TaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 highest_score = 4;
    if (has_highest_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highest_score());
    }

    // optional int32 average_score = 5;
    if (has_average_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->average_score());
    }

    // optional int32 player_count = 6;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskInfo*>(&from));
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_highest_score()) {
      set_highest_score(from.highest_score());
    }
    if (from.has_average_score()) {
      set_average_score(from.average_score());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
  }
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(star_, other->star_);
    std::swap(score_, other->score_);
    std::swap(highest_score_, other->highest_score_);
    std::swap(average_score_, other->average_score_);
    std::swap(player_count_, other->player_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TaskInfo::GetTypeName() const {
  return "Star.TaskInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SolutionInfo::kTaskIdFieldNumber;
const int SolutionInfo::kStarFieldNumber;
const int SolutionInfo::kScoreFieldNumber;
const int SolutionInfo::kSolutionIdFieldNumber;
const int SolutionInfo::kTagFieldNumber;
const int SolutionInfo::kDownloadTimesFieldNumber;
const int SolutionInfo::kUpTimesFieldNumber;
const int SolutionInfo::kDataFieldNumber;
#endif  // !_MSC_VER

SolutionInfo::SolutionInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SolutionInfo::InitAsDefaultInstance() {
}

SolutionInfo::SolutionInfo(const SolutionInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SolutionInfo::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_LONGLONG(0);
  star_ = 0;
  score_ = 0;
  solution_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tag_ = 0;
  download_times_ = 0;
  up_times_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolutionInfo::~SolutionInfo() {
  SharedDtor();
}

void SolutionInfo::SharedDtor() {
  if (solution_id_ != &::google::protobuf::internal::kEmptyString) {
    delete solution_id_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SolutionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SolutionInfo& SolutionInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

SolutionInfo* SolutionInfo::default_instance_ = NULL;

SolutionInfo* SolutionInfo::New() const {
  return new SolutionInfo;
}

void SolutionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = GOOGLE_LONGLONG(0);
    star_ = 0;
    score_ = 0;
    if (has_solution_id()) {
      if (solution_id_ != &::google::protobuf::internal::kEmptyString) {
        solution_id_->clear();
      }
    }
    tag_ = 0;
    download_times_ = 0;
    up_times_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SolutionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_solution_id;
        break;
      }

      // optional string solution_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solution_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solution_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tag;
        break;
      }

      // optional int32 tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_download_times;
        break;
      }

      // optional int32 download_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_times_)));
          set_has_download_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_up_times;
        break;
      }

      // optional int32 up_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &up_times_)));
          set_has_up_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SolutionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional string solution_id = 4;
  if (has_solution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->solution_id(), output);
  }

  // optional int32 tag = 5;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tag(), output);
  }

  // optional int32 download_times = 6;
  if (has_download_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->download_times(), output);
  }

  // optional int32 up_times = 7;
  if (has_up_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->up_times(), output);
  }

  // optional bytes data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->data(), output);
  }

}

int SolutionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional string solution_id = 4;
    if (has_solution_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solution_id());
    }

    // optional int32 tag = 5;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional int32 download_times = 6;
    if (has_download_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_times());
    }

    // optional int32 up_times = 7;
    if (has_up_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->up_times());
    }

    // optional bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolutionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SolutionInfo*>(&from));
}

void SolutionInfo::MergeFrom(const SolutionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_solution_id()) {
      set_solution_id(from.solution_id());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_download_times()) {
      set_download_times(from.download_times());
    }
    if (from.has_up_times()) {
      set_up_times(from.up_times());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void SolutionInfo::CopyFrom(const SolutionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolutionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SolutionInfo::Swap(SolutionInfo* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(star_, other->star_);
    std::swap(score_, other->score_);
    std::swap(solution_id_, other->solution_id_);
    std::swap(tag_, other->tag_);
    std::swap(download_times_, other->download_times_);
    std::swap(up_times_, other->up_times_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SolutionInfo::GetTypeName() const {
  return "Star.SolutionInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncReq::kAccFieldNumber;
const int SyncReq::kTaskFieldNumber;
#endif  // !_MSC_VER

SyncReq::SyncReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  acc_ = const_cast< ::Star::AccountInfo*>(
      ::Star::AccountInfo::internal_default_instance());
#else
  acc_ = const_cast< ::Star::AccountInfo*>(&::Star::AccountInfo::default_instance());
#endif
}

SyncReq::SyncReq(const SyncReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncReq::SharedCtor() {
  _cached_size_ = 0;
  acc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncReq::~SyncReq() {
  SharedDtor();
}

void SyncReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete acc_;
  }
}

void SyncReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncReq& SyncReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

SyncReq* SyncReq::default_instance_ = NULL;

SyncReq* SyncReq::New() const {
  return new SyncReq;
}

void SyncReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acc()) {
      if (acc_ != NULL) acc_->::Star::AccountInfo::Clear();
    }
  }
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SyncReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Star.AccountInfo acc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        break;
      }

      // repeated .Star.TaskInfo task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Star.AccountInfo acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->acc(), output);
  }

  // repeated .Star.TaskInfo task = 2;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->task(i), output);
  }

}

int SyncReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Star.AccountInfo acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc());
    }

  }
  // repeated .Star.TaskInfo task = 2;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncReq*>(&from));
}

void SyncReq::MergeFrom(const SyncReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      mutable_acc()->::Star::AccountInfo::MergeFrom(from.acc());
    }
  }
}

void SyncReq::CopyFrom(const SyncReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_acc()) {
    if (!this->acc().IsInitialized()) return false;
  }
  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  return true;
}

void SyncReq::Swap(SyncReq* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncReq::GetTypeName() const {
  return "Star.SyncReq";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncRsp::kRspCodeFieldNumber;
const int SyncRsp::kNeedUpTaskFieldNumber;
const int SyncRsp::kDownTaskFieldNumber;
#endif  // !_MSC_VER

SyncRsp::SyncRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncRsp::InitAsDefaultInstance() {
}

SyncRsp::SyncRsp(const SyncRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncRsp::~SyncRsp() {
  SharedDtor();
}

void SyncRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncRsp& SyncRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

SyncRsp* SyncRsp::default_instance_ = NULL;

SyncRsp* SyncRsp::New() const {
  return new SyncRsp;
}

void SyncRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  need_up_task_.Clear();
  down_task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SyncRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_need_up_task;
        break;
      }

      // repeated .Star.TaskInfo need_up_task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_need_up_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_need_up_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_need_up_task;
        if (input->ExpectTag(26)) goto parse_down_task;
        break;
      }

      // repeated .Star.SolutionInfo down_task = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_down_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_down_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_down_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // repeated .Star.TaskInfo need_up_task = 2;
  for (int i = 0; i < this->need_up_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->need_up_task(i), output);
  }

  // repeated .Star.SolutionInfo down_task = 3;
  for (int i = 0; i < this->down_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->down_task(i), output);
  }

}

int SyncRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  // repeated .Star.TaskInfo need_up_task = 2;
  total_size += 1 * this->need_up_task_size();
  for (int i = 0; i < this->need_up_task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->need_up_task(i));
  }

  // repeated .Star.SolutionInfo down_task = 3;
  total_size += 1 * this->down_task_size();
  for (int i = 0; i < this->down_task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->down_task(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncRsp*>(&from));
}

void SyncRsp::MergeFrom(const SyncRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  need_up_task_.MergeFrom(from.need_up_task_);
  down_task_.MergeFrom(from.down_task_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void SyncRsp::CopyFrom(const SyncRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < need_up_task_size(); i++) {
    if (!this->need_up_task(i).IsInitialized()) return false;
  }
  for (int i = 0; i < down_task_size(); i++) {
    if (!this->down_task(i).IsInitialized()) return false;
  }
  return true;
}

void SyncRsp::Swap(SyncRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    need_up_task_.Swap(&other->need_up_task_);
    down_task_.Swap(&other->down_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncRsp::GetTypeName() const {
  return "Star.SyncRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int UploadTaskInfoReq::kAccFieldNumber;
const int UploadTaskInfoReq::kTaskFieldNumber;
#endif  // !_MSC_VER

UploadTaskInfoReq::UploadTaskInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadTaskInfoReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  acc_ = const_cast< ::Star::AccountInfo*>(
      ::Star::AccountInfo::internal_default_instance());
#else
  acc_ = const_cast< ::Star::AccountInfo*>(&::Star::AccountInfo::default_instance());
#endif
}

UploadTaskInfoReq::UploadTaskInfoReq(const UploadTaskInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadTaskInfoReq::SharedCtor() {
  _cached_size_ = 0;
  acc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadTaskInfoReq::~UploadTaskInfoReq() {
  SharedDtor();
}

void UploadTaskInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete acc_;
  }
}

void UploadTaskInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadTaskInfoReq& UploadTaskInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

UploadTaskInfoReq* UploadTaskInfoReq::default_instance_ = NULL;

UploadTaskInfoReq* UploadTaskInfoReq::New() const {
  return new UploadTaskInfoReq;
}

void UploadTaskInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acc()) {
      if (acc_ != NULL) acc_->::Star::AccountInfo::Clear();
    }
  }
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadTaskInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Star.AccountInfo acc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        break;
      }

      // repeated .Star.TaskInfo task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadTaskInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Star.AccountInfo acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->acc(), output);
  }

  // repeated .Star.TaskInfo task = 2;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->task(i), output);
  }

}

int UploadTaskInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Star.AccountInfo acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc());
    }

  }
  // repeated .Star.TaskInfo task = 2;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadTaskInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadTaskInfoReq*>(&from));
}

void UploadTaskInfoReq::MergeFrom(const UploadTaskInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      mutable_acc()->::Star::AccountInfo::MergeFrom(from.acc());
    }
  }
}

void UploadTaskInfoReq::CopyFrom(const UploadTaskInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadTaskInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_acc()) {
    if (!this->acc().IsInitialized()) return false;
  }
  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  return true;
}

void UploadTaskInfoReq::Swap(UploadTaskInfoReq* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadTaskInfoReq::GetTypeName() const {
  return "Star.UploadTaskInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int UploadTaskInfoRsp::kRspCodeFieldNumber;
#endif  // !_MSC_VER

UploadTaskInfoRsp::UploadTaskInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadTaskInfoRsp::InitAsDefaultInstance() {
}

UploadTaskInfoRsp::UploadTaskInfoRsp(const UploadTaskInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadTaskInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadTaskInfoRsp::~UploadTaskInfoRsp() {
  SharedDtor();
}

void UploadTaskInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UploadTaskInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadTaskInfoRsp& UploadTaskInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

UploadTaskInfoRsp* UploadTaskInfoRsp::default_instance_ = NULL;

UploadTaskInfoRsp* UploadTaskInfoRsp::New() const {
  return new UploadTaskInfoRsp;
}

void UploadTaskInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadTaskInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadTaskInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

}

int UploadTaskInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadTaskInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadTaskInfoRsp*>(&from));
}

void UploadTaskInfoRsp::MergeFrom(const UploadTaskInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void UploadTaskInfoRsp::CopyFrom(const UploadTaskInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadTaskInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UploadTaskInfoRsp::Swap(UploadTaskInfoRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadTaskInfoRsp::GetTypeName() const {
  return "Star.UploadTaskInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int UploadSolutionReq::kAccFieldNumber;
const int UploadSolutionReq::kSolutionFieldNumber;
#endif  // !_MSC_VER

UploadSolutionReq::UploadSolutionReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadSolutionReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  acc_ = const_cast< ::Star::AccountInfo*>(
      ::Star::AccountInfo::internal_default_instance());
#else
  acc_ = const_cast< ::Star::AccountInfo*>(&::Star::AccountInfo::default_instance());
#endif
}

UploadSolutionReq::UploadSolutionReq(const UploadSolutionReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadSolutionReq::SharedCtor() {
  _cached_size_ = 0;
  acc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadSolutionReq::~UploadSolutionReq() {
  SharedDtor();
}

void UploadSolutionReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete acc_;
  }
}

void UploadSolutionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadSolutionReq& UploadSolutionReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

UploadSolutionReq* UploadSolutionReq::default_instance_ = NULL;

UploadSolutionReq* UploadSolutionReq::New() const {
  return new UploadSolutionReq;
}

void UploadSolutionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acc()) {
      if (acc_ != NULL) acc_->::Star::AccountInfo::Clear();
    }
  }
  solution_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadSolutionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Star.AccountInfo acc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_solution;
        break;
      }

      // repeated .Star.SolutionInfo solution = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_solution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_solution;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadSolutionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Star.AccountInfo acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->acc(), output);
  }

  // repeated .Star.SolutionInfo solution = 2;
  for (int i = 0; i < this->solution_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->solution(i), output);
  }

}

int UploadSolutionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Star.AccountInfo acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc());
    }

  }
  // repeated .Star.SolutionInfo solution = 2;
  total_size += 1 * this->solution_size();
  for (int i = 0; i < this->solution_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->solution(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadSolutionReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadSolutionReq*>(&from));
}

void UploadSolutionReq::MergeFrom(const UploadSolutionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  solution_.MergeFrom(from.solution_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      mutable_acc()->::Star::AccountInfo::MergeFrom(from.acc());
    }
  }
}

void UploadSolutionReq::CopyFrom(const UploadSolutionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadSolutionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_acc()) {
    if (!this->acc().IsInitialized()) return false;
  }
  for (int i = 0; i < solution_size(); i++) {
    if (!this->solution(i).IsInitialized()) return false;
  }
  return true;
}

void UploadSolutionReq::Swap(UploadSolutionReq* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    solution_.Swap(&other->solution_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadSolutionReq::GetTypeName() const {
  return "Star.UploadSolutionReq";
}


// ===================================================================

#ifndef _MSC_VER
const int UploadSolutionRsp::kRspCodeFieldNumber;
#endif  // !_MSC_VER

UploadSolutionRsp::UploadSolutionRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UploadSolutionRsp::InitAsDefaultInstance() {
}

UploadSolutionRsp::UploadSolutionRsp(const UploadSolutionRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UploadSolutionRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadSolutionRsp::~UploadSolutionRsp() {
  SharedDtor();
}

void UploadSolutionRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UploadSolutionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadSolutionRsp& UploadSolutionRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

UploadSolutionRsp* UploadSolutionRsp::default_instance_ = NULL;

UploadSolutionRsp* UploadSolutionRsp::New() const {
  return new UploadSolutionRsp;
}

void UploadSolutionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UploadSolutionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadSolutionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

}

int UploadSolutionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadSolutionRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadSolutionRsp*>(&from));
}

void UploadSolutionRsp::MergeFrom(const UploadSolutionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void UploadSolutionRsp::CopyFrom(const UploadSolutionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadSolutionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UploadSolutionRsp::Swap(UploadSolutionRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UploadSolutionRsp::GetTypeName() const {
  return "Star.UploadSolutionRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadSolutionReq::kAccFieldNumber;
const int DownloadSolutionReq::kSolutionIdFieldNumber;
#endif  // !_MSC_VER

DownloadSolutionReq::DownloadSolutionReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadSolutionReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  acc_ = const_cast< ::Star::AccountInfo*>(
      ::Star::AccountInfo::internal_default_instance());
#else
  acc_ = const_cast< ::Star::AccountInfo*>(&::Star::AccountInfo::default_instance());
#endif
}

DownloadSolutionReq::DownloadSolutionReq(const DownloadSolutionReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadSolutionReq::SharedCtor() {
  _cached_size_ = 0;
  acc_ = NULL;
  solution_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadSolutionReq::~DownloadSolutionReq() {
  SharedDtor();
}

void DownloadSolutionReq::SharedDtor() {
  if (solution_id_ != &::google::protobuf::internal::kEmptyString) {
    delete solution_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete acc_;
  }
}

void DownloadSolutionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadSolutionReq& DownloadSolutionReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

DownloadSolutionReq* DownloadSolutionReq::default_instance_ = NULL;

DownloadSolutionReq* DownloadSolutionReq::New() const {
  return new DownloadSolutionReq;
}

void DownloadSolutionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acc()) {
      if (acc_ != NULL) acc_->::Star::AccountInfo::Clear();
    }
    if (has_solution_id()) {
      if (solution_id_ != &::google::protobuf::internal::kEmptyString) {
        solution_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadSolutionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Star.AccountInfo acc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_solution_id;
        break;
      }

      // optional string solution_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solution_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solution_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadSolutionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Star.AccountInfo acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->acc(), output);
  }

  // optional string solution_id = 2;
  if (has_solution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->solution_id(), output);
  }

}

int DownloadSolutionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Star.AccountInfo acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc());
    }

    // optional string solution_id = 2;
    if (has_solution_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solution_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadSolutionReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadSolutionReq*>(&from));
}

void DownloadSolutionReq::MergeFrom(const DownloadSolutionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      mutable_acc()->::Star::AccountInfo::MergeFrom(from.acc());
    }
    if (from.has_solution_id()) {
      set_solution_id(from.solution_id());
    }
  }
}

void DownloadSolutionReq::CopyFrom(const DownloadSolutionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadSolutionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_acc()) {
    if (!this->acc().IsInitialized()) return false;
  }
  return true;
}

void DownloadSolutionReq::Swap(DownloadSolutionReq* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    std::swap(solution_id_, other->solution_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadSolutionReq::GetTypeName() const {
  return "Star.DownloadSolutionReq";
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadSolutionRsp::kRspCodeFieldNumber;
const int DownloadSolutionRsp::kSoulutionFieldNumber;
#endif  // !_MSC_VER

DownloadSolutionRsp::DownloadSolutionRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DownloadSolutionRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  soulution_ = const_cast< ::Star::SolutionInfo*>(
      ::Star::SolutionInfo::internal_default_instance());
#else
  soulution_ = const_cast< ::Star::SolutionInfo*>(&::Star::SolutionInfo::default_instance());
#endif
}

DownloadSolutionRsp::DownloadSolutionRsp(const DownloadSolutionRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadSolutionRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  soulution_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadSolutionRsp::~DownloadSolutionRsp() {
  SharedDtor();
}

void DownloadSolutionRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete soulution_;
  }
}

void DownloadSolutionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadSolutionRsp& DownloadSolutionRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

DownloadSolutionRsp* DownloadSolutionRsp::default_instance_ = NULL;

DownloadSolutionRsp* DownloadSolutionRsp::New() const {
  return new DownloadSolutionRsp;
}

void DownloadSolutionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
    if (has_soulution()) {
      if (soulution_ != NULL) soulution_->::Star::SolutionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DownloadSolutionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_soulution;
        break;
      }

      // optional .Star.SolutionInfo soulution = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soulution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soulution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadSolutionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // optional .Star.SolutionInfo soulution = 2;
  if (has_soulution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->soulution(), output);
  }

}

int DownloadSolutionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

    // optional .Star.SolutionInfo soulution = 2;
    if (has_soulution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soulution());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadSolutionRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadSolutionRsp*>(&from));
}

void DownloadSolutionRsp::MergeFrom(const DownloadSolutionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
    if (from.has_soulution()) {
      mutable_soulution()->::Star::SolutionInfo::MergeFrom(from.soulution());
    }
  }
}

void DownloadSolutionRsp::CopyFrom(const DownloadSolutionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadSolutionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_soulution()) {
    if (!this->soulution().IsInitialized()) return false;
  }
  return true;
}

void DownloadSolutionRsp::Swap(DownloadSolutionRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(soulution_, other->soulution_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DownloadSolutionRsp::GetTypeName() const {
  return "Star.DownloadSolutionRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int UpSolutionReq::kAccFieldNumber;
const int UpSolutionReq::kSolutionIdFieldNumber;
const int UpSolutionReq::kIsUpFieldNumber;
#endif  // !_MSC_VER

UpSolutionReq::UpSolutionReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpSolutionReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  acc_ = const_cast< ::Star::AccountInfo*>(
      ::Star::AccountInfo::internal_default_instance());
#else
  acc_ = const_cast< ::Star::AccountInfo*>(&::Star::AccountInfo::default_instance());
#endif
}

UpSolutionReq::UpSolutionReq(const UpSolutionReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpSolutionReq::SharedCtor() {
  _cached_size_ = 0;
  acc_ = NULL;
  solution_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_up_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpSolutionReq::~UpSolutionReq() {
  SharedDtor();
}

void UpSolutionReq::SharedDtor() {
  if (solution_id_ != &::google::protobuf::internal::kEmptyString) {
    delete solution_id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete acc_;
  }
}

void UpSolutionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpSolutionReq& UpSolutionReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

UpSolutionReq* UpSolutionReq::default_instance_ = NULL;

UpSolutionReq* UpSolutionReq::New() const {
  return new UpSolutionReq;
}

void UpSolutionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acc()) {
      if (acc_ != NULL) acc_->::Star::AccountInfo::Clear();
    }
    if (has_solution_id()) {
      if (solution_id_ != &::google::protobuf::internal::kEmptyString) {
        solution_id_->clear();
      }
    }
    is_up_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpSolutionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Star.AccountInfo acc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_solution_id;
        break;
      }

      // optional string solution_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solution_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solution_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_up;
        break;
      }

      // optional bool is_up = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_up_)));
          set_has_is_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpSolutionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Star.AccountInfo acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->acc(), output);
  }

  // optional string solution_id = 2;
  if (has_solution_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->solution_id(), output);
  }

  // optional bool is_up = 3;
  if (has_is_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_up(), output);
  }

}

int UpSolutionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Star.AccountInfo acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acc());
    }

    // optional string solution_id = 2;
    if (has_solution_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solution_id());
    }

    // optional bool is_up = 3;
    if (has_is_up()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpSolutionReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpSolutionReq*>(&from));
}

void UpSolutionReq::MergeFrom(const UpSolutionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      mutable_acc()->::Star::AccountInfo::MergeFrom(from.acc());
    }
    if (from.has_solution_id()) {
      set_solution_id(from.solution_id());
    }
    if (from.has_is_up()) {
      set_is_up(from.is_up());
    }
  }
}

void UpSolutionReq::CopyFrom(const UpSolutionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpSolutionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_acc()) {
    if (!this->acc().IsInitialized()) return false;
  }
  return true;
}

void UpSolutionReq::Swap(UpSolutionReq* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    std::swap(solution_id_, other->solution_id_);
    std::swap(is_up_, other->is_up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpSolutionReq::GetTypeName() const {
  return "Star.UpSolutionReq";
}


// ===================================================================

#ifndef _MSC_VER
const int UpSolutionRsp::kRspCodeFieldNumber;
const int UpSolutionRsp::kSoulutionFieldNumber;
#endif  // !_MSC_VER

UpSolutionRsp::UpSolutionRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpSolutionRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  soulution_ = const_cast< ::Star::SolutionInfo*>(
      ::Star::SolutionInfo::internal_default_instance());
#else
  soulution_ = const_cast< ::Star::SolutionInfo*>(&::Star::SolutionInfo::default_instance());
#endif
}

UpSolutionRsp::UpSolutionRsp(const UpSolutionRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpSolutionRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  soulution_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpSolutionRsp::~UpSolutionRsp() {
  SharedDtor();
}

void UpSolutionRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete soulution_;
  }
}

void UpSolutionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpSolutionRsp& UpSolutionRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

UpSolutionRsp* UpSolutionRsp::default_instance_ = NULL;

UpSolutionRsp* UpSolutionRsp::New() const {
  return new UpSolutionRsp;
}

void UpSolutionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
    if (has_soulution()) {
      if (soulution_ != NULL) soulution_->::Star::SolutionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpSolutionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_soulution;
        break;
      }

      // optional .Star.SolutionInfo soulution = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soulution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soulution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpSolutionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // optional .Star.SolutionInfo soulution = 2;
  if (has_soulution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->soulution(), output);
  }

}

int UpSolutionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

    // optional .Star.SolutionInfo soulution = 2;
    if (has_soulution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soulution());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpSolutionRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpSolutionRsp*>(&from));
}

void UpSolutionRsp::MergeFrom(const UpSolutionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
    if (from.has_soulution()) {
      mutable_soulution()->::Star::SolutionInfo::MergeFrom(from.soulution());
    }
  }
}

void UpSolutionRsp::CopyFrom(const UpSolutionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpSolutionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_soulution()) {
    if (!this->soulution().IsInitialized()) return false;
  }
  return true;
}

void UpSolutionRsp::Swap(UpSolutionRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(soulution_, other->soulution_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpSolutionRsp::GetTypeName() const {
  return "Star.UpSolutionRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsInfo::kAccountFieldNumber;
const int FriendsInfo::kSolutionFieldNumber;
#endif  // !_MSC_VER

FriendsInfo::FriendsInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsInfo::InitAsDefaultInstance() {
}

FriendsInfo::FriendsInfo(const FriendsInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsInfo::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsInfo::~FriendsInfo() {
  SharedDtor();
}

void FriendsInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsInfo& FriendsInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

FriendsInfo* FriendsInfo::default_instance_ = NULL;

FriendsInfo* FriendsInfo::New() const {
  return new FriendsInfo;
}

void FriendsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  solution_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_solution;
        break;
      }

      // repeated .Star.SolutionInfo solution = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_solution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_solution;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // repeated .Star.SolutionInfo solution = 2;
  for (int i = 0; i < this->solution_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->solution(i), output);
  }

}

int FriendsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  // repeated .Star.SolutionInfo solution = 2;
  total_size += 1 * this->solution_size();
  for (int i = 0; i < this->solution_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->solution(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsInfo*>(&from));
}

void FriendsInfo::MergeFrom(const FriendsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  solution_.MergeFrom(from.solution_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
}

void FriendsInfo::CopyFrom(const FriendsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < solution_size(); i++) {
    if (!this->solution(i).IsInitialized()) return false;
  }
  return true;
}

void FriendsInfo::Swap(FriendsInfo* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    solution_.Swap(&other->solution_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsInfo::GetTypeName() const {
  return "Star.FriendsInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFriendsInfoReq::kPlatformFieldNumber;
const int QueryFriendsInfoReq::kAccountListFieldNumber;
const int QueryFriendsInfoReq::kTaskListFieldNumber;
#endif  // !_MSC_VER

QueryFriendsInfoReq::QueryFriendsInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QueryFriendsInfoReq::InitAsDefaultInstance() {
}

QueryFriendsInfoReq::QueryFriendsInfoReq(const QueryFriendsInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QueryFriendsInfoReq::SharedCtor() {
  _cached_size_ = 0;
  platform_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFriendsInfoReq::~QueryFriendsInfoReq() {
  SharedDtor();
}

void QueryFriendsInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryFriendsInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryFriendsInfoReq& QueryFriendsInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

QueryFriendsInfoReq* QueryFriendsInfoReq::default_instance_ = NULL;

QueryFriendsInfoReq* QueryFriendsInfoReq::New() const {
  return new QueryFriendsInfoReq;
}

void QueryFriendsInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    platform_ = 0;
  }
  account_list_.Clear();
  task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QueryFriendsInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Star.PlatformType platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Star::PlatformType_IsValid(value)) {
            set_platform(static_cast< ::Star::PlatformType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_list;
        break;
      }

      // repeated string account_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_account_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account_list;
        if (input->ExpectTag(24)) goto parse_task_list;
        break;
      }

      // repeated int64 task_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_task_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_task_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryFriendsInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Star.PlatformType platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->platform(), output);
  }

  // repeated string account_list = 2;
  for (int i = 0; i < this->account_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account_list(i), output);
  }

  // repeated int64 task_list = 3;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->task_list(i), output);
  }

}

int QueryFriendsInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Star.PlatformType platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

  }
  // repeated string account_list = 2;
  total_size += 1 * this->account_list_size();
  for (int i = 0; i < this->account_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->account_list(i));
  }

  // repeated int64 task_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->task_list(i));
    }
    total_size += 1 * this->task_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFriendsInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryFriendsInfoReq*>(&from));
}

void QueryFriendsInfoReq::MergeFrom(const QueryFriendsInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_list_.MergeFrom(from.account_list_);
  task_list_.MergeFrom(from.task_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
}

void QueryFriendsInfoReq::CopyFrom(const QueryFriendsInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFriendsInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryFriendsInfoReq::Swap(QueryFriendsInfoReq* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    account_list_.Swap(&other->account_list_);
    task_list_.Swap(&other->task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryFriendsInfoReq::GetTypeName() const {
  return "Star.QueryFriendsInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFriendsInfoRsp::kRspCodeFieldNumber;
const int QueryFriendsInfoRsp::kTaskFieldNumber;
const int QueryFriendsInfoRsp::kFriendFieldNumber;
#endif  // !_MSC_VER

QueryFriendsInfoRsp::QueryFriendsInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QueryFriendsInfoRsp::InitAsDefaultInstance() {
}

QueryFriendsInfoRsp::QueryFriendsInfoRsp(const QueryFriendsInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QueryFriendsInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFriendsInfoRsp::~QueryFriendsInfoRsp() {
  SharedDtor();
}

void QueryFriendsInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryFriendsInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryFriendsInfoRsp& QueryFriendsInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protomsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protomsg_2eproto();
#endif
  return *default_instance_;
}

QueryFriendsInfoRsp* QueryFriendsInfoRsp::default_instance_ = NULL;

QueryFriendsInfoRsp* QueryFriendsInfoRsp::New() const {
  return new QueryFriendsInfoRsp;
}

void QueryFriendsInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  task_.Clear();
  friend__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QueryFriendsInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        break;
      }

      // repeated .Star.TaskInfo task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        if (input->ExpectTag(26)) goto parse_friend;
        break;
      }

      // repeated .Star.FriendsInfo friend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friend;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryFriendsInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // repeated .Star.TaskInfo task = 2;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->task(i), output);
  }

  // repeated .Star.FriendsInfo friend = 3;
  for (int i = 0; i < this->friend__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->friend_(i), output);
  }

}

int QueryFriendsInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  // repeated .Star.TaskInfo task = 2;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  // repeated .Star.FriendsInfo friend = 3;
  total_size += 1 * this->friend__size();
  for (int i = 0; i < this->friend__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFriendsInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryFriendsInfoRsp*>(&from));
}

void QueryFriendsInfoRsp::MergeFrom(const QueryFriendsInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  friend__.MergeFrom(from.friend__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void QueryFriendsInfoRsp::CopyFrom(const QueryFriendsInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFriendsInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  for (int i = 0; i < friend__size(); i++) {
    if (!this->friend_(i).IsInitialized()) return false;
  }
  return true;
}

void QueryFriendsInfoRsp::Swap(QueryFriendsInfoRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    task_.Swap(&other->task_);
    friend__.Swap(&other->friend__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryFriendsInfoRsp::GetTypeName() const {
  return "Star.QueryFriendsInfoRsp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Star

// @@protoc_insertion_point(global_scope)
